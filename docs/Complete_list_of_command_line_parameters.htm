<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>NetRadiant - Complete list of command line parameters - Alientrap Development</title>
<meta name="description" content="Redmine" />
<meta name="keywords" content="issue,bug,tracker" />
<link href="application.css" media="all" rel="stylesheet" type="text/css" />
<script src="prototype.js" type="text/javascript"></script>
<script src="effects.js" type="text/javascript"></script>
<script src="dragdrop.js" type="text/javascript"></script>
<script src="controls.js" type="text/javascript"></script>
<script src="application.js" type="text/javascript"></script>
<link href="jstoolbar.css" media="screen" rel="stylesheet" type="text/css" />
<!--[if IE]>
    <style type="text/css">
      * html body{ width: expression( document.documentElement.clientWidth < 900 ? '900px' : '100%' ); }
      body {behavior: url(/stylesheets/csshover.htc?1267352889);}
    </style>
<![endif]-->
  <style type="text/css">
.question { background-color:#FFEBC1; border:2px solid #FDBD3B; margin-bottom:12px; padding:0px 4px 8px 4px; }
td.formatted_questions { text-align: left; white-space: normal}
td.formatted_questions ol { margin-top: 0px; margin-bottom: 0px; }
  </style>
 <link href="stylesheet.css" media="screen" rel="stylesheet" type="text/css" />
<!-- page specific tags -->

  <link href="scm.css" media="screen" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="wrapper">
<div id="top-menu">
    <div id="account">
        <ul><li><a href="/login" class="login">Войти</a></li>
<li><a href="/account/register" class="register">Регистрация</a></li></ul>    </div>

    <ul><li><a href="/" class="home">Домашняя страница</a></li>
<li><a href="/projects" class="projects">Проекты</a></li>
<li><a href="http://www.redmine.org/guide" class="help">Помощь</a></li></ul></div>

<div id="header">
    <div id="quick-search">
        <form action="/search/index/netradiant" method="get">
        <input name="wiki_pages" type="hidden" value="1" />
        <a href="/search/index/netradiant" accesskey="4">Поиск</a>:
        <input accesskey="f" class="small" id="q" name="q" size="20" type="text" />
        </form>

    </div>

    <h1>NetRadiant</h1>

    <div id="main-menu">
        <ul><li><a href="/projects/netradiant" class="overview">Просмотр</a></li>
<li><a href="/projects/netradiant/activity" class="activity">Активность</a></li>
<li><a href="/projects/netradiant/issues" class="issues">Задачи</a></li>
<li><a href="/projects/netradiant/news" class="news">Новости</a></li>
<li><a href="/projects/netradiant/documents" class="documents">Документы</a></li>
<li><a href="/projects/netradiant/wiki" class="wiki selected">Wiki</a></li>
<li><a href="/projects/netradiant/boards" class="boards">Форумы</a></li>
<li><a href="/projects/netradiant/files" class="files">Файлы</a></li>
<li><a href="/projects/netradiant/repository" class="repository">Хранилище</a></li>
<li><a href="/ezfaq/index/netradiant" class="ezfaq">FAQ</a></li></ul>
    </div>
</div>

<div class="" id="main">
    <div id="sidebar">

  <h3>Wiki</h3>

<a href="/projects/netradiant/wiki">Стартовая страница</a><br />
<a href="/projects/netradiant/wiki/Page_index">Оглавление</a><br />
<a href="/projects/netradiant/wiki/Date_index">История страниц</a><br />



    </div>

    <div id="content">

        <div class="contextual">


<span id="watcher"></span>






<a href="/projects/netradiant/wiki/Complete_list_of_command_line_parameters/history" class="icon icon-history">История</a>
</div>





<div class="wiki">
  <h1 id="Complete-list-of-command-line-parameters">Complete list of command line parameters<a href="#Complete-list-of-command-line-parameters" class="wiki-anchor">&para;</a></h1>


	<h2 id="Common-options">Common options<a href="#Common-options" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-connect</code> address:</strong> Talk to a NetRadiant instance using a specific XML based protocol</li>
		<li><strong><code>-force</code>:</strong> Allow reading some broken/unsupported BSP files e.g. when decompiling, may crash. Also enables decompilation of model autoclip brushes.</li>
		<li><strong><code>-fs_basepath</code> path:</strong> Sets the given path as main directory of the game (can be used more than once to look in multiple paths)</li>
		<li><strong><code>-fs_forbiddenpath</code> pattern:</strong> Pattern to ignore directories, pk3, and pk3dir; example pak?.pk3 (can be used more than once to look for multiple patterns)</li>
		<li><strong><code>-fs_game</code> gamename:</strong> Sets extra game directory name to additionally load mod's resources from at higher priority (by default for Q3A 'baseq3' is loaded, -fs_game cpma will also load 'cpma'; can be used more than once)</li>
		<li><strong><code>-fs_basegame</code> gamename:</strong> Overrides default game directory name (e.g. Q3A uses 'baseq3', OpenArena 'baseoa', so -game quake3 -fs_basegame baseoa for OA )</li>
		<li><strong><code>-fs_home</code> dir:</strong> Specifies where the user home directory is on Linux</li>
		<li><strong><code>-fs_homebase</code> dir:</strong> Specifies game home directory relative to user home directory on Linux (default for Q3A: .q3a)</li>
		<li><strong><code>-fs_homepath</code> path:</strong> Sets the given path as the game home directory name (fs_home + fs_homebase)</li>
		<li><strong><code>-fs_pakpath</code> path:</strong> Specify a package directory (can be used more than once to look in multiple paths)</li>
		<li><strong><code>-game</code> gamename:</strong> Load settings for the given game (default: quake3), -help -game lists available games</li>
		<li><strong><code>-subdivisions</code> F:</strong> multiplier for patch subdivisions quality</li>
		<li><strong><code>-threads</code> N:</strong> number of threads to use</li>
		<li><strong><code>-v</code>:</strong> Verbose mode</li>
	</ul>


	<h2 id="BSP-stage">BSP stage<a href="#BSP-stage" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-bsp</code> ... filename.map:</strong> Switch that enters this stage</li>
		<li><strong><code>-altsplit</code>:</strong> Alternate BSP tree splitting weights (should give more fps)</li>
		<li><strong><code>-autocaulk</code>:</strong> Only output special .caulk file for use by radiant</li>
		<li><strong><code>-celshader</code> shadername:</strong> Sets a global cel shader name</li>
		<li><strong><code>-clipdepth</code> F:</strong> Model autoclip brushes thickness, default = 2</li>
		<li><strong><code>-custinfoparms</code>:</strong> Read scripts/custinfoparms.txt</li>
		<li><strong><code>-debugclip</code>:</strong> Make model autoclip brushes visible, using shaders debugclip, debugclip2</li>
		<li><strong><code>-debuginset</code>:</strong> Push all triangle vertexes towards the triangle center</li>
		<li><strong><code>-debugportals</code>:</strong> Make BSP portals visible in the map</li>
		<li><strong><code>-debugsurfaces</code>:</strong> Color the vertexes according to the index of the surface</li>
		<li><strong><code>-deep</code>:</strong> Use detail brushes in the BSP tree, but at lowest priority (should give more fps)</li>
		<li><strong><code>-de</code> F:</strong> Distance epsilon for plane snapping etc.</li>
		<li><strong><code>-fakemap</code>:</strong> Write fakemap.map containing all world brushes</li>
		<li><strong><code>-flares</code>:</strong> Turn on support for flares</li>
		<li><strong><code>-flat</code>:</strong> Enable flat shading (good for combining with -celshader)</li>
		<li><strong><code>-fulldetail</code>:</strong> Treat detail brushes as structural ones</li>
		<li><strong><code>-keeplights</code>:</strong> Keep light entities in the BSP file after compile</li>
		<li><strong><code>-keepmodels</code>:</strong> Keep misc_model entities in the BSP file after compile</li>
		<li><strong><code>-leaktest</code>:</strong> Abort if a leak was found</li>
		<li><strong><code>-maxarea</code>:</strong> Use Max Area face surface generation</li>
		<li><strong><code>-meta</code>:</strong> Combine adjacent triangles of the same texture to surfaces (ALWAYS USE THIS)</li>
		<li><strong><code>-metaadequatescore</code> N:</strong> Adequate score for adding triangles to meta surfaces</li>
		<li><strong><code>-metagoodscore</code> N:</strong> Good score for adding triangles to meta surfaces</li>
		<li><strong><code>-minsamplesize</code> N:</strong> Sets minimum lightmap resolution in luxels/qu</li>
		<li><strong><code>-mi</code> N:</strong> Sets the maximum number of indexes per surface</li>
		<li><strong><code>-mv</code> N:</strong> Sets the maximum number of vertices of a lightmapped surface</li>
		<li><strong><code>-ne</code> F:</strong> Normal epsilon for plane snapping etc.</li>
		<li><strong><code>-nocurves</code>:</strong> Turn off support for patches</li>
		<li><strong><code>-nodetail</code>:</strong> Leave out detail brushes</li>
		<li><strong><code>-noflares</code>:</strong> Turn off support for flares</li>
		<li><strong><code>-nofog</code>:</strong> Turn off support for fog volumes</li>
		<li><strong><code>-nohint</code>:</strong> Turn off support for hint brushes</li>
		<li><strong><code>-noob</code>:</strong> Assign surfaceparm noob to all map surfaces (Q3A:Defrag mod no-overbounces flag)</li>
		<li><strong><code>-nosRGB</code>:</strong> Treat colors and textures as linear colorspace</li>
		<li><strong><code>-nosRGBcolor</code>:</strong> Treat shader and light entity colors as linear colorspace</li>
		<li><strong><code>-nosRGBtex</code>:</strong> Treat textures as linear colorspace</li>
		<li><strong><code>-nosubdivide</code>:</strong> Turn off support for <code>q3map_tessSize</code> (breaks water vertex deforms)</li>
		<li><strong><code>-notjunc</code>:</strong> Do not fix T-junctions (causes cracks between triangles, do not use)</li>
		<li><strong><code>-nowater</code>:</strong> Turn off support for water, slime or lava (Stef, this is for you)</li>
		<li><strong><code>-np</code> A:</strong> Force all surfaces to be nonplanar with a given shade angle</li>
		<li><strong><code>-onlyents</code>:</strong> Only update entities in the BSP</li>
		<li><strong><code>-patchmeta</code>:</strong> Turn patches into triangle meshes for display</li>
		<li><strong><code>-rename</code>:</strong> Append "\_bsp" suffix to misc\_model shaders (needed for SoF2)</li>
		<li><strong><code>-samplesize</code> N:</strong> Sets default lightmap resolution in luxels/qu</li>
		<li><strong><code>-skyfix</code>:</strong> Turn sky box into six surfaces to work around ATI problems</li>
		<li><strong><code>-snap</code> N:</strong> Snap brush bevel planes to the given number of units</li>
		<li><strong><code>-sRGBcolor</code>:</strong> Treat shader and light entity colors as sRGB colorspace</li>
		<li><strong><code>-sRGBtex</code>:</strong> Treat textures as sRGB colorspace</li>
		<li><strong><code>-tempname</code> filename.map:</strong> Read the MAP file from the given file name</li>
		<li><strong><code>-verboseentities</code>:</strong> Enable <code>-v</code> only for map entities, not for the world</li>
	</ul>


	<h2 id="VIS-stage">VIS stage<a href="#VIS-stage" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-vis</code> ... filename.map:</strong> Switch that enters this stage</li>
		<li><strong><code>-fast</code>:</strong> Very fast and crude vis calculation</li>
		<li><strong><code>-hint</code>:</strong> Merge all but hint portals</li>
		<li><strong><code>-mergeportals</code>:</strong> The less crude half of <code>-merge</code>, makes vis sometimes much faster but doesn't hurt fps usually</li>
		<li><strong><code>-merge</code>:</strong> Faster but still okay vis calculation</li>
		<li><strong><code>-nopassage</code>:</strong> Just use PortalFlow vis (usually less fps)</li>
		<li><strong><code>-nosort</code>:</strong> Do not sort the portals before calculating vis (usually slower)</li>
		<li><strong><code>-passageOnly</code>:</strong> Just use PassageFlow vis (usually less fps)</li>
		<li><strong><code>-saveprt</code>:</strong> Keep the PRT file after running vis (so you can run vis again)</li>
		<li><strong><code>-v -v</code>:</strong> Extra verbose mode for cluster debug</li>
	</ul>


	<h2 id="LIGHT-stage">LIGHT stage<a href="#LIGHT-stage" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-light</code> ... filename.map:</strong> Switch that enters this stage</li>
		<li><strong><code>-approx</code> N:</strong> Vertex light approximation tolerance (never use in conjunction with deluxemapping)</li>
		<li><strong><code>-areascale</code> F, <code>-area</code> F:</strong> Scaling factor for area lights (surfacelight)</li>
		<li><strong><code>-backsplash</code> Fscale Fdistance:</strong> scale area lights backsplash fraction + set distance globally; (distance &lt -900 to omit distance setting); default = 1 23; real area lights have no backsplash (scale = 0); q3map_backsplash shader keyword overrides this setting</li>
		<li><strong><code>-border</code>:</strong> Add a red border to lightmaps for debugging</li>
		<li><strong><code>-bouncecolorratio</code> F:</strong> 0..1 ratio of colorizing light sample by texture</li>
		<li><strong><code>-bouncegrid</code>:</strong> Also compute radiosity on the light grid</li>
		<li><strong><code>-bounceonly</code>:</strong> Only compute radiosity</li>
		<li><strong><code>-bouncescale</code> F:</strong> Scaling factor for radiosity</li>
		<li><strong><code>-bounce</code> N:</strong> Number of bounces for radiosity</li>
		<li><strong><code>-brightness</code> F:</strong> Scaling factor for resulting lightmaps brightness</li>
		<li><strong><code>-cheapgrid</code>:</strong> Use <code>-cheap</code> style lighting for radiosity</li>
		<li><strong><code>-cheap</code>:</strong> Abort vertex light calculations when white is reached</li>
		<li><strong><code>-compensate</code> F:</strong> Lightmap compensate (darkening factor applied after everything else)</li>
		<li><strong><code>-contrast</code> F:</strong> -255 .. 255 lighting contrast, default = 0</li>
		<li><strong><code>-cpma</code>:</strong> CPMA vertex lighting mode</li>
		<li><strong><code>-custinfoparms</code>:</strong> Read scripts/custinfoparms.txt</li>
		<li><strong><code>-dark</code>:</strong> Darken lightmap seams</li>
		<li><strong><code>-debugaxis</code>:</strong> Color the lightmaps according to the lightmap axis</li>
		<li><strong><code>-debugcluster</code>:</strong> Color the lightmaps according to the index of the cluster</li>
		<li><strong><code>-debugdeluxe</code>:</strong> Show deluxemaps on the lightmap</li>
		<li><strong><code>-debugnormals</code>:</strong> Color the lightmaps according to the direction of the surface normal</li>
		<li><strong><code>-debugorigin</code>:</strong> Color the lightmaps according to the origin of the luxels</li>
		<li><strong><code>-debugsamplesize</code>:</strong> display all of 'surface too large for desired samplesize+lightmapsize' warnings</li>
		<li><strong><code>-debugsurfaces</code>, <code>-debugsurface</code>:</strong> Color the lightmaps according to the index of the surface</li>
		<li><strong><code>-debug</code>:</strong> Mark the lightmaps according to the cluster: unmapped clusters get yellow, occluded ones get pink, flooded ones get blue overlay color, otherwise red</li>
		<li><strong><code>-deluxemode 0</code>:</strong> Use modelspace deluxemaps (DarkPlaces)</li>
		<li><strong><code>-deluxemode 1</code>:</strong> Use tangentspace deluxemaps</li>
		<li><strong><code>-deluxe</code>, <code>-deluxemap</code>:</strong> Enable deluxemapping (light direction maps)</li>
		<li><strong><code>-dirtdebug</code>, <code>-debugdirt</code>:</strong> Store the dirtmaps as lightmaps for debugging</li>
		<li><strong><code>-dirtdepth</code>:</strong> Dirtmapping depth</li>
		<li><strong><code>-dirtgain</code>:</strong> Dirtmapping exponent</li>
		<li><strong><code>-dirtmode 0</code>:</strong> Ordered direction dirtmapping</li>
		<li><strong><code>-dirtmode 1</code>:</strong> Randomized direction dirtmapping</li>
		<li><strong><code>-dirtscale</code>:</strong> Dirtmapping scaling factor</li>
		<li><strong><code>-dirty</code>:</strong> Enable dirtmapping</li>
		<li><strong><code>-dump</code>:</strong> Dump radiosity from <code>-bounce</code> into numbered MAP file prefabs</li>
		<li><strong><code>-export</code>:</strong> Export lightmaps when compile finished (like <code>-export</code> mode)</li>
		<li><strong><code>-exposure</code> F:</strong> Lightmap exposure to better support overbright spots</li>
		<li><strong><code>-external</code>:</strong> Force external lightmaps even if at size of internal lightmaps</li>
		<li><strong><code>-extlmhacksize</code> N or N N:</strong> External lightmaps hack size: similar to -lightmapsize N: Size of lightmaps to generate (must be a power of two), but instead of native external lightmaps enables hack to reference them in autogenerated shader (for vanilla Q3 etc)</li>
		<li><strong><code>-extradist</code> F:</strong> Extra distance for lights in map units</li>
		<li><strong><code>-extravisnudge</code>:</strong> Broken feature to nudge the luxel origin to a better vis cluster</li>
		<li><strong><code>-fastbounce</code>:</strong> Use <code>-fast</code> style lighting for radiosity</li>
		<li><strong><code>-faster</code>:</strong> Use a faster falloff curve for lighting; also implies <code>-fast</code></li>
		<li><strong><code>-fastgrid</code>:</strong> Use <code>-fast</code> style lighting for the light grid</li>
		<li><strong><code>-fast</code>:</strong> Ignore tiny light contributions</li>
		<li><strong><code>-fill</code>:</strong> Fill lightmap colors from surrounding pixels to improve JPEG compression</li>
		<li><strong><code>-fillpink</code>:</strong> Fill unoccupied lightmap pixels with pink colour</li>
		<li><strong><code>-filter</code>:</strong> Lightmap filtering</li>
		<li><strong><code>-floodlight</code>:</strong> Enable floodlight (zero-effort somewhat decent lighting)</li>
		<li><strong><code>-gamma</code> F:</strong> Lightmap gamma</li>
		<li><strong><code>-gridambientdirectionality</code> F:</strong> Ambient directional lighting received (default: 0.0)</li>
		<li><strong><code>-gridambientscale</code> F:</strong> Scaling factor for the light grid ambient components only</li>
		<li><strong><code>-griddirectionality</code> F:</strong> Directional lighting received (default: 1.0)</li>
		<li><strong><code>-gridscale</code> F:</strong> Scaling factor for the light grid only</li>
		<li><strong><code>-lightanglehl</code> 0:</strong> Disable half lambert light angle attenuation</li>
		<li><strong><code>-lightanglehl</code> 1:</strong> Enable half lambert light angle attenuation</li>
		<li><strong><code>-lightmapdir</code> directory:</strong> Directory to store external lightmaps (default: same as map name without extension)</li>
		<li><strong><code>-lightmapsearchblocksize</code> N:</strong> Restricted lightmap searching - block size</li>
		<li><strong><code>-lightmapsearchpower</code> N:</strong> Restricted lightmap searching - merge power</li>
		<li><strong><code>-lightmapsize</code> N:</strong> Size of lightmaps to generate (must be a power of two)</li>
		<li><strong><code>-lomem</code>:</strong> Low memory but slower lighting mode</li>
		<li><strong><code>-lowquality</code>:</strong> Low quality floodlight (appears to currently break floodlight)</li>
		<li><strong><code>-minsamplesize</code> N:</strong> Sets minimum lightmap resolution in luxels/qu</li>
		<li><strong><code>-nobouncestore</code>:</strong> Do not store BSP, lightmap and shader files between bounces</li>
		<li><strong><code>-nocollapse</code>:</strong> Do not collapse identical lightmaps</li>
		<li><strong><code>-nodeluxe</code>, <code>-nodeluxemap</code>:</strong> Disable deluxemapping</li>
		<li><strong><code>-nofastpoint</code>:</strong> Disable fast point light calculation</li>
		<li><strong><code>-nogrid</code>:</strong> Disable grid light calculation (makes all entities fullbright)</li>
		<li><strong><code>-nolightmapsearch</code>:</strong> Do not optimize lightmap packing for GPU memory usage (as doing so costs fps)</li>
		<li><strong><code>-nolm</code>:</strong> Skip lightmaps calculation</li>
		<li><strong><code>-normalmap</code>:</strong> Color the lightmaps according to the direction of the surface normal (TODO is this identical to <code>-debugnormals</code>?)</li>
		<li><strong><code>-nosRGB</code>:</strong> Treat colors, textures, and lightmaps as linear colorspace</li>
		<li><strong><code>-nosRGBcolor</code>:</strong> Treat shader and light entity colors as linear colorspace</li>
		<li><strong><code>-nosRGBlight</code>:</strong> Write lightmaps as linear colorspace</li>
		<li><strong><code>-nosRGBtex</code>:</strong> Treat textures as linear colorspace</li>
		<li><strong><code>-nostyle</code>, <code>-nostyles</code>:</strong> Disable support for light styles</li>
		<li><strong><code>-nosurf</code>:</strong> Disable tracing against surfaces (only uses BSP nodes then)</li>
		<li><strong><code>-notrace</code>:</strong> Disable shadow occlusion</li>
		<li><strong><code>-novertex</code>:</strong> Disable vertex lighting; optional (0..1) value sets constant vertex light globally</li>
		<li><strong><code>-patchshadows</code>:</strong> Cast shadows from patches</li>
		<li><strong><code>-pointscale</code> F, <code>-point</code> F:</strong> Scaling factor for spherical and spot point lights (light entities)</li>
		<li><strong><code>-q3</code>:</strong> Use nonlinear falloff curve by default (like Q3A)</li>
		<li><strong><code>-randomsamples</code>:</strong> Use random sampling for lightmaps</li>
		<li><strong><code>-rawlightmapsizelimit</code> N:</strong> Sets maximum lightmap resolution in luxels/qu (only affects patches if used -patchmeta in BSP stage)</li>
		<li><strong><code>-samplescale</code> F:</strong> Scales all lightmap resolutions</li>
		<li><strong><code>-samplesize</code> N:</strong> Sets default lightmap resolution in luxels/qu</li>
		<li><strong><code>-samplessearchboxsize</code> N:</strong> Search box size (1 to 4) for lightmap adaptive supersampling</li>
		<li><strong><code>-samples</code> N:</strong> Adaptive supersampling quality</li>
		<li><strong><code>-saturation</code> F:</strong> Lighting saturation: default = 1, &gt 1 = saturate, 0 = grayscale, &lt 0 = complementary colors</li>
		<li><strong><code>-scale</code> F:</strong> Scaling factor for all light types</li>
		<li><strong><code>-shadeangle</code> A:</strong> Angle for phong shading</li>
		<li><strong><code>-shade</code>:</strong> Enable phong shading at default shade angle</li>
		<li><strong><code>-skyscale</code> F, <code>-sky</code> F:</strong> Scaling factor for sky and sun light</li>
		<li><strong><code>-slowallocate</code>:</strong> Use old (a bit more careful, but much slower) lightmaps packing algorithm</li>
		<li><strong><code>-sphericalscale</code> F, <code>-spherical</code> F:</strong> Scaling factor for spherical point light entities</li>
		<li><strong><code>-spotscale</code> F, <code>-spot</code> F:</strong> Scaling factor for spot point light entities</li>
		<li><strong><code>-sRGB</code>:</strong> Treat colors, textures, and lightmaps as sRGB colorspace</li>
		<li><strong><code>-sRGBcolor</code>:</strong> Treat shader and light entity colors as sRGB colorspace</li>
		<li><strong><code>-sRGBlight</code>:</strong> Write lightmaps as sRGB colorspace</li>
		<li><strong><code>-sRGBtex</code>:</strong> Treat textures as sRGB colorspace</li>
		<li><strong><code>-style</code>, <code>-styles</code>:</strong> Enable support for light styles</li>
		<li><strong><code>-sunonly</code>:</strong> Only compute sun light</li>
		<li><strong><code>-super</code> N, <code>-supersample</code> N:</strong> Ordered grid supersampling quality</li>
		<li><strong><code>-thresh</code> F:</strong> Triangle subdivision threshold</li>
		<li><strong><code>-trianglecheck</code>:</strong> Broken check that should ensure luxels apply to the right triangle</li>
		<li><strong><code>-trisoup</code>:</strong> Convert brush faces to triangle soup</li>
		<li><strong><code>-vertexscale</code> F:</strong> Scaling factor for resulting vertex light values</li>
		<li><strong><code>-wolf</code>:</strong> Use linear falloff curve by default (like W:ET)</li>
	</ul>


	<h2 id="Analyzing-BSP-like-file-structure">Analyzing BSP-like file structure<a href="#Analyzing-BSP-like-file-structure" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-analyze</code> ... filename.bsp:</strong> Switch that enters this mode</li>
		<li><strong><code>-lumpswap</code>:</strong> Swap byte order in the lumps</li>
	</ul>


	<h2 id="Converting-xx-Decompiling">Converting &#38; Decompiling<a href="#Converting-xx-Decompiling" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-convert</code> ... filename.bsp:</strong> Switch that enters this mode</li>
		<li><strong><code>-deluxemapsastexcoord</code>:</strong> Save deluxemap names and texcoords instead of textures (only when writing ase and obj)</li>
		<li><strong><code>-de</code> F:</strong> Distance epsilon for the conversion (only when reading map)</li>
		<li><strong><code>-fast</code>:</strong> fast bsp to map conversion mode (without texture alignments)</li>
		<li><strong><code>-format</code> converter:</strong> Select the converter, default ase (available: map, map_bp, ase, obj, or game names)</li>
		<li><strong><code>-lightmapsastexcoord</code>:</strong> Save lightmap names and texcoords instead of textures (only when writing ase and obj)</li>
		<li><strong><code>-meta</code>:</strong> Combine adjacent triangles of the same texture to surfaces (only when reading map)</li>
		<li><strong><code>-ne</code> F:</strong> Normal epsilon for the conversion (only when reading map)</li>
		<li><strong><code>-patchmeta</code>:</strong> Turn patches into triangle meshes for display (only when reading map)</li>
		<li><strong><code>-readbsp</code>:</strong> Force converting bsp to selected format</li>
		<li><strong><code>-readmap</code>:</strong> Force converting map to selected format</li>
		<li><strong><code>-shadersasbitmap</code>:</strong> Save shader names as bitmap names in the model so it works as a prefab (only when writing ase and obj)</li>
	</ul>


	<h2 id="Exporting-lightmaps">Exporting lightmaps<a href="#Exporting-lightmaps" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-export</code> filename.bsp:</strong> Copies lightmaps from the BSP to filename/lightmap_NNNN.tga</li>
	</ul>


	<h2 id="Importing-lightmaps">Importing lightmaps<a href="#Importing-lightmaps" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-import</code> filename.bsp:</strong> Copies lightmaps from filename/lightmap_NNNN.tga into the BSP</li>
	</ul>


	<h2 id="Exporting-entities">Exporting entities<a href="#Exporting-entities" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-exportents</code> filename.bsp:</strong> Exports the entities to a text file (.ent)</li>
	</ul>


	<h2 id="Fixing-AAS-checksum">Fixing AAS checksum<a href="#Fixing-AAS-checksum" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-fixaas</code> filename.bsp:</strong> Writes BSP checksum to AAS file, so that it's accepted as valid by engine</li>
	</ul>


	<h2 id="Get-info-about-BSP-file">Get info about BSP file<a href="#Get-info-about-BSP-file" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-info</code> filename.bsp .. filenameN.bsp:</strong> Switch that enters this mode</li>
	</ul>


	<h2 id="MiniMap">MiniMap<a href="#MiniMap" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-minimap</code> ... filename.bsp:</strong> Creates a minimap of the BSP, by default writes to <code>../gfx/filename_mini.tga</code></li>
		<li><strong><code>-autolevel</code>:</strong> Automatically level brightness and contrast</li>
		<li><strong><code>-black</code>:</strong> Write the minimap as a black-on-transparency RGBA32 image</li>
		<li><strong><code>-boost</code> F:</strong> Sets the contrast boost value (higher values make a brighter image); contrast boost is somewhat similar to gamma, but continuous even at zero</li>
		<li><strong><code>-border</code> F:</strong> Sets the amount of border pixels relative to the total image size</li>
		<li><strong><code>-brightness</code> F:</strong> Sets brightness value to add to minimap values</li>
		<li><strong><code>-contrast</code> F:</strong> Sets contrast value to scale minimap values (doesn't affect brightness)</li>
		<li><strong><code>-gray</code>:</strong> Write the minimap as a white-on-black GRAY8 image</li>
		<li><strong><code>-keepaspect</code>:</strong> Ensure the aspect ratio is kept (the minimap is then letterboxed to keep aspect)</li>
		<li><strong><code>-minmax</code> xmin ymin zmin xmax ymax zmax:</strong> Forces specific map dimensions (note: the minimap actually uses these dimensions, scaled to the target size while keeping aspect with centering, and 1/64 of border appended to all sides)</li>
		<li><strong><code>-noautolevel</code>:</strong> Do not automatically level brightness and contrast</li>
		<li><strong><code>-nokeepaspect</code>:</strong> Do not ensure the aspect ratio is kept (makes it easier to use the image in your code, but looks bad together with sharpening)</li>
		<li><strong><code>-o</code> filename.tga:</strong> Sets the output file name</li>
		<li><strong><code>-random</code> N:</strong> Sets the randomized supersampling count (cannot be combined with <code>-samples</code>)</li>
		<li><strong><code>-samples</code> N:</strong> Sets the ordered supersampling count (cannot be combined with <code>-random</code>)</li>
		<li><strong><code>-sharpen</code> F:</strong> Sets the sharpening coefficient</li>
		<li><strong><code>-size</code> N:</strong> Sets the width and height of the output image</li>
		<li><strong><code>-white</code>:</strong> Write the minimap as a white-on-transparency RGBA32 image</li>
	</ul>


	<h2 id="BSP-Scaling">BSP Scaling<a href="#BSP-Scaling" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-scale [options]</code> S filename.bsp:</strong> Scale uniformly</li>
		<li><strong><code>-scale [options]</code> SX SY SZ filename.bsp:</strong> Scale non-uniformly</li>
		<li><strong><code>-tex</code>:</strong> Option to scale without texture lock</li>
		<li><strong><code>-spawn_ref</code> F:</strong> Option to vertically offset info_player_* entities (adds spawn_ref, scales, subtracts spawn_ref)</li>
	</ul>


	<h2 id="BSP-Shift">BSP Shift<a href="#BSP-Shift" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-shift</code> S filename.bsp:</strong> Shift uniformly</li>
		<li><strong><code>-shift</code> SX SY SZ filename.bsp:</strong> Shift non-uniformly</li>
	</ul>


	<h2 id="PK3-creation">PK3 creation<a href="#PK3-creation" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-pk3</code> ... filename.bsp .. filenameN.bsp:</strong> Creates a pk3 for the BSP(s) (complete Q3 support). Using file 'gamename.exclude' to exclude vanilla game resources.</li>
		<li><strong><code>-complevel</code> N:</strong> Set compression level (-1 .. 10); 0 = uncompressed, -1 = 6, 10 = ultra zlib incompatible preset</li>
		<li><strong><code>-dbg</code>:</strong> Print wall of debug text, useful for .exclude file creation</li>
		<li><strong><code>-png</code>:</strong> include png textures, at highest priority; taking tga, jpg by default</li>
	</ul>


	<h2 id="Maps-repack-creation">Maps repack creation<a href="#Maps-repack-creation" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-repack</code> ... filename.bsp .. filenameN.bsp or filenames.txt:</strong> Creates repack of BSP(s) (complete Q3 support). Rips off only used shaders to new shader file. Using file 'gamename.exclude' to exclude vanilla game resources and 'repack.exclude' to exclude resources of existing repack.</li>
		<li><strong><code>-analyze</code>:</strong> Only print bsp resource references and exit</li>
		<li><strong><code>-complevel</code> N:</strong> Set compression level (-1 .. 10); 0 = uncompressed, -1 = 6, 10 = ultra zlib incompatible preset</li>
		<li><strong><code>-dbg</code>:</strong> Print wall of debug text</li>
		<li><strong><code>-png</code>:</strong> include png textures, at highest priority; taking tga, jpg by default</li>
	</ul>


	<h2 id="BSP-json-export/import">BSP json export/import<a href="#BSP-json-export/import" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-json</code> ... filename.bsp:</strong> Export/import BSP to/from json text files for debugging and editing purposes</li>
		<li><strong><code>-unpack</code>:</strong> Unpack BSP to json</li>
		<li><strong><code>-pack</code>:</strong> Pack json to BSP</li>
		<li><strong><code>-useflagnames</code>:</strong> While packing, deduce surface/content flag values from their names in shaders.json (useful for conversion to a game with different flag values)</li>
		<li><strong><code>-skipflags</code>:</strong> While -useflagnames, skip unknown flag names</li>
	</ul>
</div>


	<h2 id="BSP-merge">BSP merge<a href="#BSP-merge" class="wiki-anchor">&para;</a></h2>
	<ul>
		<li><strong><code>-mergebsp</code> ... mainBsp.bsp bspToinject.bsp:</strong> Inject latter BSP to former. Tree and vis data of the main one are preserved.</li>
		<li><strong><code>-fixnames</code>:</strong> Make incoming BSP target/targetname names unique to not collide with existing names</li>
		<li><strong><code>-world</code>:</strong> Also merge worldspawn model (brushes as if they were detail, no BSP tree is affected) (only merges entities by default)</li>
	</ul>
</div>






<p class="other-formats">Экспортировать в
	<span><a href="/projects/netradiant/wiki/Complete_list_of_command_line_parameters?format=html&amp;version=3" class="html" rel="nofollow">HTML</a></span>
	<span><a href="/projects/netradiant/wiki/Complete_list_of_command_line_parameters?format=txt&amp;version=3" class="txt" rel="nofollow">TXT</a></span>
</p>








				<div style="clear:both;"></div>
    </div>
</div>

<div id="ajax-indicator" style="display:none;"><span>Загрузка...</span></div>

<div id="footer">
    Powered by <a href="http://www.redmine.org/">Redmine</a> &copy; 2006-2010 Jean-Philippe Lang
</div>
</div>

</body>
</html>
